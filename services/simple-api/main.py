#!/usr/bin/env python3
"""
Simple API Service - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–∏—Å
–ê–≤—Ç–æ—Ä: Jarvis AI Assistant
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import logging
import os
from typing import Dict, List, Optional
from datetime import datetime

import uvicorn
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from pydantic import BaseModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class Message(BaseModel):
    text: str
    user_id: Optional[str] = "anonymous"
    timestamp: Optional[datetime] = None

class Response(BaseModel):
    message: str
    status: str = "success"
    data: Optional[Dict] = None

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Jarvis Simple API",
    description="–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–∏—Å –¥–ª—è Jarvis AI Assistant",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
messages = []
active_connections = []

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Jarvis AI Assistant</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f0f0f0; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { text-align: center; color: #333; margin-bottom: 30px; }
            .chat { border: 1px solid #ddd; height: 400px; overflow-y: auto; padding: 10px; margin-bottom: 20px; background: #fafafa; }
            .message { margin: 10px 0; padding: 10px; border-radius: 5px; }
            .user { background: #007bff; color: white; text-align: right; }
            .jarvis { background: #28a745; color: white; }
            .input-area { display: flex; gap: 10px; }
            input[type="text"] { flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
            button { padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }
            button:hover { background: #0056b3; }
            .status { text-align: center; color: #666; margin-top: 20px; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ü§ñ Jarvis AI Assistant</h1>
                <p>–í–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</p>
            </div>
            
            <div id="chat" class="chat"></div>
            
            <div class="input-area">
                <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." onkeypress="handleKeyPress(event)">
                <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </div>
            
            <div class="status">
                <p>–°—Ç–∞—Ç—É—Å: <span id="status">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</span></p>
            </div>
        </div>

        <script>
            let ws;
            let isConnected = false;

            function connect() {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                ws = new WebSocket(`${protocol}//${window.location.host}/ws`);
                
                ws.onopen = function(event) {
                    isConnected = true;
                    document.getElementById('status').textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
                    addMessage('Jarvis', '–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º. –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?', 'jarvis');
                };
                
                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    addMessage('Jarvis', data.message, 'jarvis');
                };
                
                ws.onclose = function(event) {
                    isConnected = false;
                    document.getElementById('status').textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
                    setTimeout(connect, 3000);
                };
                
                ws.onerror = function(error) {
                    console.error('WebSocket error:', error);
                    document.getElementById('status').textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
                };
            }

            function sendMessage() {
                const input = document.getElementById('messageInput');
                const message = input.value.trim();
                
                if (message && isConnected) {
                    addMessage('–í—ã', message, 'user');
                    ws.send(JSON.stringify({text: message, user_id: 'user'}));
                    input.value = '';
                }
            }

            function handleKeyPress(event) {
                if (event.key === 'Enter') {
                    sendMessage();
                }
            }

            function addMessage(sender, text, type) {
                const chat = document.getElementById('chat');
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${type}`;
                messageDiv.innerHTML = `<strong>${sender}:</strong> ${text}`;
                chat.appendChild(messageDiv);
                chat.scrollTop = chat.scrollHeight;
            }

            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            connect();
        </script>
    </body>
    </html>
    """)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "service": "simple-api",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "running",
        "active_connections": len(active_connections),
        "total_messages": len(messages),
        "uptime": "running"
    }

@app.get("/messages")
async def get_messages():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return {"messages": messages}

@app.post("/message", response_model=Response)
async def send_message(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if not message.timestamp:
            message.timestamp = datetime.now()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages.append(message.dict())
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        response_text = await process_message(message.text)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        response_data = {
            "message": response_text,
            "timestamp": datetime.now().isoformat()
        }
        
        for connection in active_connections:
            try:
                await connection.send_json(response_data)
            except:
                active_connections.remove(connection)
        
        return Response(
            message="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            data={"response": response_text}
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def process_message(text: str) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text_lower = text.lower()
    
    # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    if any(word in text_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å"]):
        return "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ö–∞–∫ –¥–µ–ª–∞?"
    
    elif any(word in text_lower for word in ["–∫–∞–∫ –¥–µ–ª–∞", "–∫–∞–∫ —Ç—ã", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ"]):
        return "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    
    elif any(word in text_lower for word in ["–≤—Ä–µ–º—è", "–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å"]):
        current_time = datetime.now().strftime("%H:%M")
        return f"–°–µ–π—á–∞—Å {current_time}. –í—Ä–µ–º—è –ª–µ—Ç–∏—Ç –Ω–µ–∑–∞–º–µ—Ç–Ω–æ!"
    
    elif any(word in text_lower for word in ["–ø–æ–≥–æ–¥–∞", "–¥–æ–∂–¥—å", "—Å–æ–ª–Ω—Ü–µ"]):
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –æ–∫–Ω–æ! üòä"
    
    elif any(word in text_lower for word in ["–ø–æ–º–æ—â—å", "help", "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å"]):
        return """–Ø —É–º–µ—é:
        ‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É
        ‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        ‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        
        –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"""
    
    elif any(word in text_lower for word in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é"]):
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! üòä"
    
    elif any(word in text_lower for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "—É–≤–∏–¥–∏–º—Å—è"]):
        return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ!"
    
    else:
        return f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: '{text}'. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º, —è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—é!"

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    active_connections.append(websocket)
    
    try:
        while True:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_json()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            response_text = await process_message(data.get("text", ""))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await websocket.send_json({
                "message": response_text,
                "timestamp": datetime.now().isoformat()
            })
            
    except WebSocketDisconnect:
        active_connections.remove(websocket)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}")
        if websocket in active_connections:
            active_connections.remove(websocket)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ Simple API Service...")
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=False,
        log_level="info"
    )